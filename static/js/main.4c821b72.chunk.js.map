{"version":3,"sources":["components/Navbar.js","components/Textform.js","components/Alert.js","components/About.js","App.js","reportWebVitals.js","index.js"],"names":["Navbar","props","className","mode","href","title","type","id","to","aboutText","role","checked","onClick","togglemode","for","Textform","useState","text","setText","message","setMessage","getLenght","split","len","trim","filter","element","length","isNaN","htmlFor","fieldname","style","backgroundColor","color","value","onChange","event","target","rows","placeholder","heading","toUpperCase","showalert","toLowerCase","bold","result","forEach","letter","undefined","charAt","slice","count","navigator","clipboard","writeText","setTimeout","Alert","alert","About","dark","border","light","darkmode","setDarkmode","App","Darkmode","setAlert","msg","show","console","log","document","body","exact","path","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","getElementById"],"mappings":"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","file":"static/js/main.4c821b72.chunk.js","sourcesContent":["import React from 'react'\r\nimport { Link } from 'react-router-dom'\r\nexport default function Navbar(props) {\r\n    return (\r\n        <div>\r\n          <nav className={`navbar navbar-${props.mode} bg-${props.mode}`}>\r\n            <div className=\"container-fluid\">\r\n              <a className=\"navbar-brand\" href=\"#\">{props.title}</a>\r\n              <button className=\"navbar-toggler\" type=\"button\" data-bs-toggle=\"collapse\" data-bs-target=\"#navbarText\" aria-controls=\"navbarText\" aria-expanded=\"false\" aria-label=\"Toggle navigation\">\r\n                <span className=\"navbar-toggler-icon\"></span>\r\n              </button>\r\n              <div className=\"collapse navbar-collapse\" id=\"navbarText\">\r\n                <ul className=\"navbar-nav me-auto mb-2 mb-lg-0\">\r\n                  <li className=\"nav-item\">\r\n                    <Link className=\"nav-link active\" aria-current=\"page\" to=\"/\">Home</Link>\r\n                  </li>\r\n                  <li className=\"nav-item\">\r\n                    <Link className=\"nav-link\" to=\"/about\">{props.aboutText}</Link>\r\n                  </li>\r\n                  <li className=\"nav-item\">\r\n                    <a className=\"nav-link\" href=\"#\">search</a>\r\n                  </li>\r\n                  <li className=\"nav-item\">\r\n                  <div className=\"form-check form-switch\">\r\n                <input className=\"form-check-input\" type=\"checkbox\" role=\"switch\" checked={props.mode === 'dark'?true:false} onClick={props.togglemode} id=\"flexSwitchCheckDefault\" />\r\n                <label className={`form-check-label text-${props.mode === \"dark\"?'light':'dark'}`} for=\"flexSwitchCheckDefault\" >{`${props.mode === 'dark'?'Disable':'Enable'}`} Dark mode</label>\r\n                </div>\r\n                  </li>\r\n                </ul>\r\n                <span className=\"navbar-text\">\r\n                </span>\r\n              </div>\r\n            </div>\r\n          </nav>\r\n        </div>\r\n    )\r\n}\r\n","import React,{ useState } from 'react'\r\n\r\nexport default function Textform(props) {\r\n    const [text , setText] = useState(\"\")\r\n    const [message , setMessage] = useState(\"\")\r\n    const handleuppercase = () =>{\r\n        setText(text.toUpperCase())\r\n        props.showalert(\"Text Capitalized\" , 'success')\r\n    }\r\n    const handlelowercase = () =>{\r\n        setText(text.toLowerCase())\r\n        props.showalert(\"converted to lower case\" , 'success')\r\n    }\r\n    const handlebold = () =>{\r\n        setText(text.bold())\r\n        props.showalert(\"converted to bold\" , 'success')\r\n\r\n    }\r\n    const handleonchange = (event) =>{\r\n        setText(event.target.value)\r\n    }\r\n    const handleClearText = () =>{\r\n        setText(\"\")\r\n        props.showalert(\"Text Cleared\" , 'danger')\r\n\r\n    }\r\n\r\n    const handleCapFirst = () =>{\r\n        let result = '';\r\n        text.split(' ').forEach(letter => {\r\n        if (letter !== undefined){\r\n        result  += letter.charAt(0).toUpperCase() + letter.slice(1)+\" \" \r\n        setText(result.trim())\r\n        }\r\n        });\r\n        props.showalert(\"First letter capitalized\" , 'success')\r\n    }\r\n    const handleAlternateCase = () => {\r\n        let result = ''\r\n        let count = 0\r\n        text.split(\"\").forEach(letter => {\r\n            count+=1\r\n            if(count % 2 === 0  ){\r\n                result += letter.toUpperCase()\r\n            }else{\r\n                result += letter.toLowerCase()\r\n            }\r\n            setText(result)\r\n        })\r\n        props.showalert(\"Change case to alternate \" , 'success')\r\n\r\n    }\r\n    const handleInverseCase = () => {\r\n        let result = '';\r\n        text.split('').forEach(letter => {\r\n            if(letter.toUpperCase() === letter){\r\n                letter = letter.toLowerCase()\r\n            }else{\r\n                letter = letter.toUpperCase()\r\n            }\r\n            result+=letter\r\n            setText(result)\r\n        });\r\n        props.showalert(\"set cases to invertcase \" , 'success')\r\n    }\r\n    const handleCopyText = () =>{\r\n        navigator.clipboard.writeText(text);\r\n        props.showalert(\"Text copied to Clipboard\",\"success\")\r\n        setMessage(\"Text copied to Clipboard\")\r\n        setTimeout(() => {\r\n            setMessage('')\r\n        }, 1500);\r\n    }\r\n    const getLenght = (text,split) =>{\r\n        let len= (text.trim().split(split).filter(function(element){return element !== ''})).length\r\n        if(len=== isNaN){return 0}else{return len}\r\n    }\r\n    return (\r\n        <>\r\n        <div>\r\n            \r\n            <div className=\"mb-3\">\r\n                <h3 htmlFor=\"exampleFormControlTextarea1\"  className={`form-label text-${props.mode === 'dark'?'light':'dark'}`}>{props.fieldname}</h3>\r\n                <textarea className=\"form-control\" style={{backgroundColor:`${props.mode === 'dark'?'black':'white'}`,color:`${props.mode === 'light'?'black':'white'}`}} id=\"exampleFormControlTextarea1\" value={text} onChange={handleonchange} rows=\"8 \" placeholder={props.heading}></textarea>\r\n                <div>{message}</div>\r\n            </div>\r\n            <button type=\"submit\" className=\"btn btn-primary\" onClick={handleuppercase}>Convert to Uppercase</button>\r\n            <button type=\"submit\" className=\"btn btn-secondary mx-2 my-2\" onClick={handlelowercase}>Convert to lowercase</button>\r\n            <button type=\"submit\" className=\"btn btn-dark mx-2 my-2\" onClick={handlebold}>bold</button>\r\n            <button type=\"submit\" className=\"btn btn-danger mx-2 my-2\" onClick={handleClearText}>clear</button>\r\n            <button type=\"submit\" className=\"btn btn-warning mx-2 my-2\" onClick={handleCapFirst}>CapFirst</button>\r\n            <button type=\"submit\" className=\"btn btn-info mx-2 my-2\" onClick={handleAlternateCase}>AlTeRnAtE CaSe</button>\r\n            <button type=\"submit\" className=\"btn btn-light mx-2 my-2\" onClick={handleInverseCase}>iNvErSe CaSe</button>\r\n            <button type=\"submit\" className=\"btn btn-dark mx-2 my-2\" onClick={handleCopyText}>Copy Text</button>\r\n        </div>\r\n        <div className={`my-4 text-${props.mode === 'dark'?'light':'dark'}`}>\r\n            <h2>Your Text Summry</h2>\r\n            <div className=\"container my-2 \">\r\n                <p>Your  has {getLenght(text,' ')} words and {getLenght(text,'')} Chacters</p>\r\n                <p>Need {getLenght(text,' ').length * 0.008} minutes to Read</p>\r\n                <div className=\"my-4 container\">\r\n                    <h3>Preview of your Text</h3>\r\n                    <p>{text.length>0?text:\"Enter the Text To Above Text Box To Preview Here\"}</p>\r\n                </div>\r\n            </div>\r\n        </div>\r\n        </>\r\n    )\r\n}\r\n","import React from 'react'\r\n\r\nexport default function Alert(props) {\r\n    return (\r\n        props.alert && <div>\r\n            <div className={`alert alert-${props.alert['type']} alert-dismissible fade ${props.alert['show']}`} role=\"alert\" >\r\n                {props.alert['msg']}\r\n            </div>\r\n        </div>\r\n    )\r\n}\r\n","import React ,{useState} from 'react'\r\n\r\nexport default function About() {\r\n    let dark = {\r\n        backgroundColor : 'black',   \r\n        color : 'white',\r\n        border: '2px solid white',\r\n        title: \"Disable dark Mode\",\r\n        mode: true\r\n    }\r\n    let light = {\r\n        backgroundColor : 'white',   \r\n        color : 'black',\r\n        border : '2px solid black',\r\n        title: \"Enable dark Mode\",\r\n        mode: false\r\n    }\r\n    const [darkmode,setDarkmode] = useState(light)\r\n    const handleDarkMode =()=>{\r\n        if(darkmode['mode']){\r\n            setDarkmode(light)\r\n        }else{\r\n            setDarkmode(dark)\r\n        }\r\n    }\r\n    return (\r\n        <div className='container' style={darkmode}>\r\n            <h1 className=\"my-3\">About Us</h1>\r\n            <div className=\"accordion\"  id=\"accordionExample\">\r\n            <div className=\"accordion-item\" style={darkmode}>\r\n                <h2 className=\"accordion-header\" id=\"headingOne\">\r\n                <button className=\"accordion-button\" style={darkmode} type=\"button\" data-bs-toggle=\"collapse\" data-bs-target=\"#collapseOne\" aria-expanded=\"true\" aria-controls=\"collapseOne\">\r\n                    Accordion Item #1\r\n                </button>\r\n                </h2>\r\n                <div id=\"collapseOne\" className=\"accordion-collapse collapse show\" aria-labelledby=\"headingOne\" data-bs-parent=\"#accordionExample\">\r\n                <div className=\"accordion-body\">\r\n                    <strong>This is the first item's accordion body.</strong> It is shown by default, until the collapse plugin adds the appropriate classes that we use to style each element. These classes control the overall appearance, as well as the showing and hiding via CSS transitions. You can modify any of this with custom CSS or overriding our default variables. It's also worth noting that just about any HTML can go within the <code>.accordion-body</code>, though the transition does limit overflow.\r\n                </div>\r\n                </div>\r\n            </div>\r\n            <div className=\"accordion-item\" style={darkmode}>\r\n                <h2 className=\"accordion-header\" id=\"headingTwo\">\r\n                <button className=\"accordion-button collapsed\" style={darkmode} type=\"button\" data-bs-toggle=\"collapse\" data-bs-target=\"#collapseTwo\" aria-expanded=\"false\" aria-controls=\"collapseTwo\">\r\n                    Accordion Item #2\r\n                </button>\r\n                </h2>\r\n                <div id=\"collapseTwo\" className=\"accordion-collapse collapse\" aria-labelledby=\"headingTwo\" data-bs-parent=\"#accordionExample\">\r\n                <div className=\"accordion-body\">\r\n                    <strong>This is the second item's accordion body.</strong> It is hidden by default, until the collapse plugin adds the appropriate classes that we use to style each element. These classes control the overall appearance, as well as the showing and hiding via CSS transitions. You can modify any of this with custom CSS or overriding our default variables. It's also worth noting that just about any HTML can go within the <code>.accordion-body</code>, though the transition does limit overflow.\r\n                </div>\r\n                </div>\r\n            </div>\r\n            <div className=\"accordion-item\" style={darkmode}>\r\n                <h2 className=\"accordion-header\" id=\"headingThree\">\r\n                <button className=\"accordion-button collapsed\" style={darkmode} type=\"button\" data-bs-toggle=\"collapse\" data-bs-target=\"#collapseThree\" aria-expanded=\"false\" aria-controls=\"collapseThree\">\r\n                    Accordion Item #3\r\n                </button>\r\n                </h2>\r\n                <div id=\"collapseThree\" className=\"accordion-collapse collapse\" aria-labelledby=\"headingThree\" data-bs-parent=\"#accordionExample\">\r\n                <div className=\"accordion-body\">\r\n                    <strong>This is the third item's accordion body.</strong> It is hidden by default, until the collapse plugin adds the appropriate classes that we use to style each element. These classes control the overall appearance, as well as the showing and hiding via CSS transitions. You can modify any of this with custom CSS or overriding our default variables. It's also worth noting that just about any HTML can go within the <code>.accordion-body</code>, though the transition does limit overflow.\r\n                </div>\r\n                </div>\r\n            </div>\r\n            </div>\r\n            <div className=\"container p-3\">\r\n                <div className=\"form-check form-switch\">\r\n                <input className=\"form-check-input\" type=\"checkbox\" role=\"switch\" checked={darkmode['mode']} onClick={handleDarkMode} id=\"flexSwitchCheckDefault\" />\r\n                <label className=\"form-check-label\" htmlFor=\"flexSwitchCheckDefault\">{darkmode['title']}</label>\r\n                </div>\r\n            </div>\r\n        </div>\r\n    )\r\n}\r\n","import './App.css';\nimport { useState } from 'react';\nimport Navbar from './components/Navbar';\nimport Textform from './components/Textform';\nimport Alert from './components/Alert';\nimport {\n  BrowserRouter as Router,\n  Switch,\n  Route,\n  Link\n} from \"react-router-dom\";  \nimport About from './components/About';\nfunction App() {\n  const [Darkmode, setDarkmode] = useState('dark')\n  const [alert, setAlert] = useState(null)\n  const showalert = (message , type)=>{\n    setAlert({\n      msg:message,\n      type:type,\n      show: 'show'\n    })\n    setTimeout(() => {\n      setAlert(null)\n    }, 2500);\n  }\n  const toggleDarkMode = () =>{\n    console.log(\"working\")\n    if(Darkmode === \"dark\"){ \n      setDarkmode('light')\n      document.body.style.backgroundColor = 'white'\n      showalert('Light Mode is Activated','dark')\n      document.title = \"TextUtils - Light Mode\"\n     }else{\n      setDarkmode('dark')\n      document.body.style.backgroundColor = 'rgb(23 48 73)'\n      showalert('Dark Mode is Activated','light')\n      document.title = \"TextUtils - dark Mode\"\n     }\n  }\n  return (\n    <div className=\"App\">\n      <Router>\n      <Navbar title=\"TextUtils\" aboutText=\"about\" mode={Darkmode} togglemode={toggleDarkMode} />\n      <Alert alert={alert}  />\n      <div className=\"container my-3\">\n      <Switch>\n          <Route exact path=\"/about\">\n            <About />\n          </Route>\n          <Route exact path=\"/\">\n          <Textform showalert={showalert} mode={Darkmode} heading=\"Enter the Heading here\" fieldname=\"Enter the text to enelize\" />\n          </Route>\n        </Switch>\n       {/* <About />    */}\n      </div>\n      </Router>\n\n\n    </div>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}